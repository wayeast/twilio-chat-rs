#![allow(unused_variables, unused_mut, dead_code, non_camel_case_types)]
//! This file was generated by async-google-apis. (https://github.com/dermesser/async-google-apis)
//!
//! (c) 2020 Lewin Bormann <lbo@spheniscida.de>
//!
//! ## Getting started
//!
//! **Tip**: Take a look at those types ending in `...Service`. These represent API resources
//! and contain methods to interact with an API. The remaining types are used by those methods
//! and can be explored starting from a method you want to use.
//!
//! The generated code's dependencies are in the `async-google-apis-common` crate. The main
//! dependencies are hyper, yup-oauth2 (for OAuth authentication), and serde.
//!
//! I'd be happy if you let me know about your use case of this code.
//!
//! THIS FILE HAS BEEN GENERATED -- SAVE ANY MODIFICATIONS BEFORE REPLACING.

use gcs_common::*;
use serde::{Deserialize, Serialize};

/// Scopes of this API. Convertible to their string representation with `AsRef`.
#[derive(Debug, Clone, Copy)]
pub enum TexttospeechScopes {
    /// See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    ///
    /// URL: https://www.googleapis.com/auth/cloud-platform
    CloudPlatform,
}

impl std::convert::AsRef<str> for TexttospeechScopes {
    fn as_ref(&self) -> &'static str {
        match self {
            TexttospeechScopes::CloudPlatform => "https://www.googleapis.com/auth/cloud-platform",
        }
    }
}

/// Description of audio data to be synthesized.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AudioConfig {
    /// Required. The format of the audio byte stream.
    #[serde(rename = "audioEncoding")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audio_encoding: Option<AudioConfigAudioEncoding>,
    /// Optional. Input only. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. See [audio profiles](https://cloud.google.com/text-to-speech/docs/audio-profiles) for current supported profile ids.
    #[serde(rename = "effectsProfileId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub effects_profile_id: Option<Vec<String>>,
    /// Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
    #[serde(rename = "pitch")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pitch: Option<f64>,
    /// Optional. The synthesis sample rate (in hertz) for this audio. When this is specified in SynthesizeSpeechRequest, if this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen, in which case it will fail the request and return google.rpc.Code.INVALID_ARGUMENT.
    #[serde(rename = "sampleRateHertz")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sample_rate_hertz: Option<i32>,
    /// Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error.
    #[serde(rename = "speakingRate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub speaking_rate: Option<f64>,
    /// Optional. Input only. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. Strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that.
    #[serde(rename = "volumeGainDb")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub volume_gain_db: Option<f64>,
}

/// The request message for Operations.CancelOperation.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CancelOperationRequest {}

/// Description of the custom voice to be synthesized.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CustomVoiceParams {
    /// Required. The name of the AutoML model that synthesizes the custom voice.
    #[serde(rename = "model")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// Optional. The usage of the synthesized audio to be reported.
    #[serde(rename = "reportedUsage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reported_usage: Option<CustomVoiceParamsReportedUsage>,
}

/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Empty {}

/// Metadata for response returned by the `SynthesizeLongAudio` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct GoogleCloudTexttospeechV1SynthesizeLongAudioMetadata {
    /// The progress of the most recent processing update in percentage, ie. 70.0%.
    #[serde(rename = "progressPercentage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub progress_percentage: Option<f64>,
    /// Time when the request was received.
    #[serde(rename = "startTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
}

/// The response message for Operations.ListOperations.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListOperationsResponse {
    /// The standard List next-page token.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// A list of operations that matches the specified filter in the request.
    #[serde(rename = "operations")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operations: Option<Vec<Operation>>,
}

/// The message returned to the client by the `ListVoices` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListVoicesResponse {
    /// The list of voices.
    #[serde(rename = "voices")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub voices: Option<Vec<Voice>>,
}

/// This resource represents a long-running operation that is the result of a network API call.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Operation {
    /// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
    #[serde(rename = "done")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub done: Option<bool>,
    #[serde(rename = "error")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Status>,
    /// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
    #[serde(rename = "metadata")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
    /// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
    #[serde(rename = "response")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<HashMap<String, String>>,
}

/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Status {
    /// The status code, which should be an enum value of google.rpc.Code.
    #[serde(rename = "code")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<i32>,
    /// A list of messages that carry the error details. There is a common set of message types for APIs to use.
    #[serde(rename = "details")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<HashMap<String, String>>>,
    /// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
    #[serde(rename = "message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

/// Contains text input to be synthesized. Either `text` or `ssml` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. The input size is limited to 5000 bytes.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SynthesisInput {
    /// The SSML document to be synthesized. The SSML document must be valid and well-formed. Otherwise the RPC will fail and return google.rpc.Code.INVALID_ARGUMENT. For more information, see [SSML](https://cloud.google.com/text-to-speech/docs/ssml).
    #[serde(rename = "ssml")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ssml: Option<String>,
    /// The raw text to be synthesized.
    #[serde(rename = "text")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

/// Metadata for response returned by the `SynthesizeLongAudio` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SynthesizeLongAudioMetadata {
    /// The progress of the most recent processing update in percentage, ie. 70.0%.
    #[serde(rename = "progressPercentage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub progress_percentage: Option<f64>,
    /// Time when the request was received.
    #[serde(rename = "startTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
}

/// The top-level message sent by the client for the `SynthesizeLongAudio` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SynthesizeLongAudioRequest {
    #[serde(rename = "audioConfig")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audio_config: Option<AudioConfig>,
    #[serde(rename = "input")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub input: Option<SynthesisInput>,
    /// Specifies a Cloud Storage URI for the synthesis results. Must be specified in the format: `gs://bucket_name/object_name`, and the bucket must already exist.
    #[serde(rename = "outputGcsUri")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub output_gcs_uri: Option<String>,
    #[serde(rename = "voice")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub voice: Option<VoiceSelectionParams>,
}

/// The top-level message sent by the client for the `SynthesizeSpeech` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SynthesizeSpeechRequest {
    #[serde(rename = "audioConfig")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audio_config: Option<AudioConfig>,
    #[serde(rename = "input")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub input: Option<SynthesisInput>,
    #[serde(rename = "voice")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub voice: Option<VoiceSelectionParams>,
}

/// The message returned to the client by the `SynthesizeSpeech` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SynthesizeSpeechResponse {
    /// The audio data bytes encoded as specified in the request, including the header for encodings that are wrapped in containers (e.g. MP3, OGG_OPUS). For LINEAR16 audio, we include the WAV header. Note: as with all bytes fields, protobuffers use a pure binary representation, whereas JSON representations use base64.
    #[serde(rename = "audioContent")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audio_content: Option<String>,
}

/// Description of a voice supported by the TTS service.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Voice {
    /// The languages that this voice supports, expressed as [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags (e.g. "en-US", "es-419", "cmn-tw").
    #[serde(rename = "languageCodes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language_codes: Option<Vec<String>>,
    /// The name of this voice. Each distinct voice has a unique name.
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The natural sample rate (in hertz) for this voice.
    #[serde(rename = "naturalSampleRateHertz")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub natural_sample_rate_hertz: Option<i32>,
    /// The gender of this voice.
    #[serde(rename = "ssmlGender")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ssml_gender: Option<VoiceSsmlGender>,
}

/// Description of which voice to use for a synthesis request.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VoiceSelectionParams {
    #[serde(rename = "customVoice")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub custom_voice: Option<CustomVoiceParams>,
    /// Required. The language (and potentially also the region) of the voice expressed as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag, e.g. "en-US". This should not include a script tag (e.g. use "cmn-cn" rather than "cmn-Hant-cn"), because the script will be inferred from the input provided in the SynthesisInput. The TTS service will use this parameter to help choose an appropriate voice. Note that the TTS service may choose a voice with a slightly different language code than the one selected; it may substitute a different region (e.g. using en-US rather than en-CA if there isn't a Canadian voice available), or even a different language, e.g. using "nb" (Norwegian Bokmal) instead of "no" (Norwegian)".
    #[serde(rename = "languageCode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language_code: Option<String>,
    /// The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and gender.
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement; if a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.
    #[serde(rename = "ssmlGender")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ssml_gender: Option<VoiceSelectionParamsSsmlGender>,
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum AudioConfigAudioEncoding {
    Undefined,
    /// Not specified. Will return result google.rpc.Code.INVALID_ARGUMENT.
    #[serde(rename = "ALAW")]
    ALAW,
    /// Uncompressed 16-bit signed little-endian samples (Linear PCM). Audio content returned as LINEAR16 also contains a WAV header.
    #[serde(rename = "AUDIO_ENCODING_UNSPECIFIED")]
    AUDIO_ENCODING_UNSPECIFIED,
    /// MP3 audio at 32kbps.
    #[serde(rename = "LINEAR16")]
    LINEAR16,
    /// Opus encoded audio wrapped in an ogg container. The result will be a file which can be played natively on Android, and in browsers (at least Chrome and Firefox). The quality of the encoding is considerably higher than MP3 while using approximately the same bitrate.
    #[serde(rename = "MP3")]
    MP3,
    /// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law. Audio content returned as MULAW also contains a WAV header.
    #[serde(rename = "MULAW")]
    MULAW,
    /// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/A-law. Audio content returned as ALAW also contains a WAV header.
    #[serde(rename = "OGG_OPUS")]
    OGG_OPUS,
}

impl std::default::Default for AudioConfigAudioEncoding {
    fn default() -> AudioConfigAudioEncoding {
        AudioConfigAudioEncoding::Undefined
    }
}

impl std::fmt::Display for AudioConfigAudioEncoding {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            AudioConfigAudioEncoding::Undefined => write!(f, "undefined"),
            AudioConfigAudioEncoding::ALAW => write!(f, "ALAW"),
            AudioConfigAudioEncoding::AUDIO_ENCODING_UNSPECIFIED => {
                write!(f, "AUDIO_ENCODING_UNSPECIFIED")
            }
            AudioConfigAudioEncoding::LINEAR16 => write!(f, "LINEAR16"),
            AudioConfigAudioEncoding::MP3 => write!(f, "MP3"),
            AudioConfigAudioEncoding::MULAW => write!(f, "MULAW"),
            AudioConfigAudioEncoding::OGG_OPUS => write!(f, "OGG_OPUS"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CustomVoiceParamsReportedUsage {
    Undefined,
    /// Request with reported usage unspecified will be rejected.
    #[serde(rename = "OFFLINE")]
    OFFLINE,
    /// For scenarios where the synthesized audio is not downloadable and can only be used once. For example, real-time request in IVR system.
    #[serde(rename = "REALTIME")]
    REALTIME,
    /// For scenarios where the synthesized audio is downloadable and can be reused. For example, the synthesized audio is downloaded, stored in customer service system and played repeatedly.
    #[serde(rename = "REPORTED_USAGE_UNSPECIFIED")]
    REPORTED_USAGE_UNSPECIFIED,
}

impl std::default::Default for CustomVoiceParamsReportedUsage {
    fn default() -> CustomVoiceParamsReportedUsage {
        CustomVoiceParamsReportedUsage::Undefined
    }
}

impl std::fmt::Display for CustomVoiceParamsReportedUsage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CustomVoiceParamsReportedUsage::Undefined => write!(f, "undefined"),
            CustomVoiceParamsReportedUsage::OFFLINE => write!(f, "OFFLINE"),
            CustomVoiceParamsReportedUsage::REALTIME => write!(f, "REALTIME"),
            CustomVoiceParamsReportedUsage::REPORTED_USAGE_UNSPECIFIED => {
                write!(f, "REPORTED_USAGE_UNSPECIFIED")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum VoiceSsmlGender {
    Undefined,
    /// An unspecified gender. In VoiceSelectionParams, this means that the client doesn't care which gender the selected voice will have. In the Voice field of ListVoicesResponse, this may mean that the voice doesn't fit any of the other categories in this enum, or that the gender of the voice isn't known.
    #[serde(rename = "FEMALE")]
    FEMALE,
    /// A male voice.
    #[serde(rename = "MALE")]
    MALE,
    /// A female voice.
    #[serde(rename = "NEUTRAL")]
    NEUTRAL,
    /// A gender-neutral voice. This voice is not yet supported.
    #[serde(rename = "SSML_VOICE_GENDER_UNSPECIFIED")]
    SSML_VOICE_GENDER_UNSPECIFIED,
}

impl std::default::Default for VoiceSsmlGender {
    fn default() -> VoiceSsmlGender {
        VoiceSsmlGender::Undefined
    }
}

impl std::fmt::Display for VoiceSsmlGender {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            VoiceSsmlGender::Undefined => write!(f, "undefined"),
            VoiceSsmlGender::FEMALE => write!(f, "FEMALE"),
            VoiceSsmlGender::MALE => write!(f, "MALE"),
            VoiceSsmlGender::NEUTRAL => write!(f, "NEUTRAL"),
            VoiceSsmlGender::SSML_VOICE_GENDER_UNSPECIFIED => {
                write!(f, "SSML_VOICE_GENDER_UNSPECIFIED")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum VoiceSelectionParamsSsmlGender {
    Undefined,
    /// An unspecified gender. In VoiceSelectionParams, this means that the client doesn't care which gender the selected voice will have. In the Voice field of ListVoicesResponse, this may mean that the voice doesn't fit any of the other categories in this enum, or that the gender of the voice isn't known.
    #[serde(rename = "FEMALE")]
    FEMALE,
    /// A male voice.
    #[serde(rename = "MALE")]
    MALE,
    /// A female voice.
    #[serde(rename = "NEUTRAL")]
    NEUTRAL,
    /// A gender-neutral voice. This voice is not yet supported.
    #[serde(rename = "SSML_VOICE_GENDER_UNSPECIFIED")]
    SSML_VOICE_GENDER_UNSPECIFIED,
}

impl std::default::Default for VoiceSelectionParamsSsmlGender {
    fn default() -> VoiceSelectionParamsSsmlGender {
        VoiceSelectionParamsSsmlGender::Undefined
    }
}

impl std::fmt::Display for VoiceSelectionParamsSsmlGender {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            VoiceSelectionParamsSsmlGender::Undefined => write!(f, "undefined"),
            VoiceSelectionParamsSsmlGender::FEMALE => write!(f, "FEMALE"),
            VoiceSelectionParamsSsmlGender::MALE => write!(f, "MALE"),
            VoiceSelectionParamsSsmlGender::NEUTRAL => write!(f, "NEUTRAL"),
            VoiceSelectionParamsSsmlGender::SSML_VOICE_GENDER_UNSPECIFIED => {
                write!(f, "SSML_VOICE_GENDER_UNSPECIFIED")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum TexttospeechParamsdollar_xgafv {
    Undefined,
    /// v1 error format
    #[serde(rename = "1")]
    _1,
    /// v2 error format
    #[serde(rename = "2")]
    _2,
}

impl std::default::Default for TexttospeechParamsdollar_xgafv {
    fn default() -> TexttospeechParamsdollar_xgafv {
        TexttospeechParamsdollar_xgafv::Undefined
    }
}

impl std::fmt::Display for TexttospeechParamsdollar_xgafv {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            TexttospeechParamsdollar_xgafv::Undefined => write!(f, "undefined"),
            TexttospeechParamsdollar_xgafv::_1 => write!(f, "1"),
            TexttospeechParamsdollar_xgafv::_2 => write!(f, "2"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum TexttospeechParamsAlt {
    Undefined,
    /// Responses with Content-Type of application/json
    #[serde(rename = "json")]
    Json,
    /// Media download with context-dependent Content-Type
    #[serde(rename = "media")]
    Media,
    /// Responses with Content-Type of application/x-protobuf
    #[serde(rename = "proto")]
    Proto,
}

impl std::default::Default for TexttospeechParamsAlt {
    fn default() -> TexttospeechParamsAlt {
        TexttospeechParamsAlt::Undefined
    }
}

impl std::fmt::Display for TexttospeechParamsAlt {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            TexttospeechParamsAlt::Undefined => write!(f, "undefined"),
            TexttospeechParamsAlt::Json => write!(f, "json"),
            TexttospeechParamsAlt::Media => write!(f, "media"),
            TexttospeechParamsAlt::Proto => write!(f, "proto"),
        };
        Ok(())
    }
}

/// Parameters for the `operations.cancel` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct OperationsCancelParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub texttospeech_params: Option<TexttospeechParams>,
    /// The name of the operation resource to be cancelled.
    #[serde(rename = "name")]
    pub name: String,
}

impl std::fmt::Display for OperationsCancelParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `operations.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct OperationsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub texttospeech_params: Option<TexttospeechParams>,
    /// The name of the operation resource to be deleted.
    #[serde(rename = "name")]
    pub name: String,
}

impl std::fmt::Display for OperationsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `locations.synthesizeLongAudio` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ProjectsLocationsSynthesizeLongAudioParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub texttospeech_params: Option<TexttospeechParams>,
    /// The resource states of the request in the form of `projects/*/locations/*`.
    #[serde(rename = "parent")]
    pub parent: String,
}

impl std::fmt::Display for ProjectsLocationsSynthesizeLongAudioParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `operations.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ProjectsLocationsOperationsGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub texttospeech_params: Option<TexttospeechParams>,
    /// The name of the operation resource.
    #[serde(rename = "name")]
    pub name: String,
}

impl std::fmt::Display for ProjectsLocationsOperationsGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `operations.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ProjectsLocationsOperationsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub texttospeech_params: Option<TexttospeechParams>,
    /// The standard list filter.
    #[serde(rename = "filter")]
    pub filter: Option<String>,
    /// The name of the operation's parent resource.
    #[serde(rename = "name")]
    pub name: String,
    /// The standard list page size.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// The standard list page token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
}

impl std::fmt::Display for ProjectsLocationsOperationsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.filter {
            write!(
                f,
                "&filter={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `text.synthesize` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct TextSynthesizeParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub texttospeech_params: Option<TexttospeechParams>,
}

impl std::fmt::Display for TextSynthesizeParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `voices.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VoicesListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub texttospeech_params: Option<TexttospeechParams>,
    /// Optional. Recommended. [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. If not specified, the API will return all supported voices. If specified, the ListVoices call will only return voices that can be used to synthesize this language_code. For example, if you specify `"en-NZ"`, all `"en-NZ"` voices will be returned. If you specify `"no"`, both `"no-\*"` (Norwegian) and `"nb-\*"` (Norwegian Bokmal) voices will be returned.
    #[serde(rename = "languageCode")]
    pub language_code: Option<String>,
}

impl std::fmt::Display for VoicesListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.language_code {
            write!(
                f,
                "&languageCode={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct TexttospeechParams {
    /// V1 error format.
    #[serde(rename = "$.xgafv")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dollar_xgafv: Option<TexttospeechParamsdollar_xgafv>,
    /// OAuth access token.
    #[serde(rename = "access_token")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub access_token: Option<String>,
    /// Data format for response.
    #[serde(rename = "alt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alt: Option<TexttospeechParamsAlt>,
    /// JSONP
    #[serde(rename = "callback")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub callback: Option<String>,
    /// Selector specifying which fields to include in a partial response.
    #[serde(rename = "fields")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fields: Option<String>,
    /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// OAuth 2.0 token for the current user.
    #[serde(rename = "oauth_token")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub oauth_token: Option<String>,
    /// Returns response with indentations and line breaks.
    #[serde(rename = "prettyPrint")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pretty_print: Option<bool>,
    /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    #[serde(rename = "quotaUser")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quota_user: Option<String>,
    /// Legacy upload protocol for media (e.g. "media", "multipart").
    #[serde(rename = "uploadType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upload_type: Option<String>,
    /// Upload protocol for media (e.g. "raw", "multipart").
    #[serde(rename = "upload_protocol")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upload_protocol: Option<String>,
}

impl std::fmt::Display for TexttospeechParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.dollar_xgafv {
            write!(
                f,
                "&$.xgafv={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.access_token {
            write!(
                f,
                "&access_token={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.alt {
            write!(
                f,
                "&alt={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.callback {
            write!(
                f,
                "&callback={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.fields {
            write!(
                f,
                "&fields={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.key {
            write!(
                f,
                "&key={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.oauth_token {
            write!(
                f,
                "&oauth_token={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.pretty_print {
            write!(
                f,
                "&prettyPrint={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.quota_user {
            write!(
                f,
                "&quotaUser={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.upload_type {
            write!(
                f,
                "&uploadType={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.upload_protocol {
            write!(
                f,
                "&upload_protocol={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// The Texttospeech Operations service represents the Operations resource.
pub struct OperationsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl OperationsService {
    /// Create a new OperationsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> OperationsService {
        OperationsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://texttospeech.googleapis.com/".into(),
            root_url: "https://texttospeech.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of TexttospeechScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
    pub async fn cancel(
        &self,
        params: &OperationsCancelParams,
        req: &CancelOperationRequest,
    ) -> Result<Empty> {
        let rel_path = format!(
            "v1/{name}:cancel",
            name = percent_encode(format!("{}", params.name).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[TexttospeechScopes::CloudPlatform.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.texttospeech_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
    pub async fn delete(&self, params: &OperationsDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/{name}",
            name = percent_encode(format!("{}", params.name).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[TexttospeechScopes::CloudPlatform.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.texttospeech_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }
}

/// The Texttospeech Projects service represents the Projects resource.
pub struct ProjectsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl ProjectsService {
    /// Create a new ProjectsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> ProjectsService {
        ProjectsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://texttospeech.googleapis.com/".into(),
            root_url: "https://texttospeech.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of TexttospeechScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }
}

/// The Texttospeech ProjectsLocations service represents the ProjectsLocations resource.
pub struct ProjectsLocationsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl ProjectsLocationsService {
    /// Create a new ProjectsLocationsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> ProjectsLocationsService {
        ProjectsLocationsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://texttospeech.googleapis.com/".into(),
            root_url: "https://texttospeech.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of TexttospeechScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Synthesizes long form text asynchronously.
    pub async fn synthesize_long_audio(
        &self,
        params: &ProjectsLocationsSynthesizeLongAudioParams,
        req: &SynthesizeLongAudioRequest,
    ) -> Result<Operation> {
        let rel_path = format!(
            "v1/{parent}:synthesizeLongAudio",
            parent = percent_encode(format!("{}", params.parent).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[TexttospeechScopes::CloudPlatform.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.texttospeech_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Texttospeech ProjectsLocationsOperations service represents the ProjectsLocationsOperations resource.
pub struct ProjectsLocationsOperationsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl ProjectsLocationsOperationsService {
    /// Create a new ProjectsLocationsOperationsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(
        client: TlsClient,
        auth: A,
    ) -> ProjectsLocationsOperationsService {
        ProjectsLocationsOperationsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://texttospeech.googleapis.com/".into(),
            root_url: "https://texttospeech.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of TexttospeechScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
    pub async fn get(&self, params: &ProjectsLocationsOperationsGetParams) -> Result<Operation> {
        let rel_path = format!(
            "v1/{name}",
            name = percent_encode(format!("{}", params.name).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[TexttospeechScopes::CloudPlatform.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.texttospeech_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
    pub async fn list(
        &self,
        params: &ProjectsLocationsOperationsListParams,
    ) -> Result<ListOperationsResponse> {
        let rel_path = format!(
            "v1/{name}/operations",
            name = percent_encode(format!("{}", params.name).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[TexttospeechScopes::CloudPlatform.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.texttospeech_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Texttospeech Text service represents the Text resource.
pub struct TextService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl TextService {
    /// Create a new TextService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> TextService {
        TextService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://texttospeech.googleapis.com/".into(),
            root_url: "https://texttospeech.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of TexttospeechScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Synthesizes speech synchronously: receive results after all text input has been processed.
    pub async fn synthesize(
        &self,
        params: &TextSynthesizeParams,
        req: &SynthesizeSpeechRequest,
    ) -> Result<SynthesizeSpeechResponse> {
        let rel_path = format!("v1/text:synthesize",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[TexttospeechScopes::CloudPlatform.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.texttospeech_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Texttospeech Voices service represents the Voices resource.
pub struct VoicesService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl VoicesService {
    /// Create a new VoicesService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> VoicesService {
        VoicesService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://texttospeech.googleapis.com/".into(),
            root_url: "https://texttospeech.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of TexttospeechScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Returns a list of Voice supported for synthesis.
    pub async fn list(&self, params: &VoicesListParams) -> Result<ListVoicesResponse> {
        let rel_path = format!("v1/voices",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[TexttospeechScopes::CloudPlatform.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.texttospeech_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}
